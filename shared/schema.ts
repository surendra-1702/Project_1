import { pgTable, text, serial, integer, boolean, timestamp, real, jsonb } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  email: text("email").notNull().unique(),
  password: text("password").notNull(),
  firstName: text("first_name"),
  lastName: text("last_name"),
  age: integer("age"),
  height: real("height"), // in cm
  weight: real("weight"), // in kg
  gender: text("gender"), // 'male' | 'female'
  activityLevel: text("activity_level"), // 'sedentary' | 'light' | 'moderate' | 'active' | 'very-active'
  fitnessGoal: text("fitness_goal"), // 'weight-loss' | 'muscle-gain' | 'endurance' | 'strength' | 'general-fitness'
  dailyCalorieGoal: integer("daily_calorie_goal"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const exercises = pgTable("exercises", {
  id: serial("id").primaryKey(),
  exerciseId: text("exercise_id").notNull().unique(), // From ExerciseDB API
  name: text("name").notNull(),
  bodyPart: text("body_part").notNull(),
  target: text("target").notNull(),
  equipment: text("equipment").notNull(),
  gifUrl: text("gif_url"),
  instructions: text("instructions").array(),
});

export const workoutPlans = pgTable("workout_plans", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").references(() => users.id).notNull(),
  title: text("title").notNull(),
  description: text("description"),
  goal: text("goal").notNull(),
  experienceLevel: text("experience_level").notNull(),
  daysPerWeek: integer("days_per_week").notNull(),
  sessionDuration: integer("session_duration").notNull(), // in minutes
  planData: jsonb("plan_data").notNull(), // Generated by AI
  isActive: boolean("is_active").default(false),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const workoutSessions = pgTable("workout_sessions", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").references(() => users.id).notNull(),
  planId: integer("plan_id").references(() => workoutPlans.id),
  date: timestamp("date").notNull(),
  exercises: jsonb("exercises").notNull(), // Array of exercises with sets/reps
  completed: boolean("completed").default(false),
  duration: integer("duration"), // actual duration in minutes
  notes: text("notes"),
});

export const foodEntries = pgTable("food_entries", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").references(() => users.id).notNull(),
  date: timestamp("date").notNull(),
  meal: text("meal").notNull(), // 'breakfast' | 'lunch' | 'dinner' | 'snack'
  foodName: text("food_name").notNull(),
  serving: text("serving").notNull(),
  calories: integer("calories").notNull(),
  protein: real("protein"), // in grams
  carbs: real("carbs"), // in grams
  fat: real("fat"), // in grams
});

export const blogs = pgTable("blogs", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").references(() => users.id).notNull(),
  title: text("title").notNull(),
  content: text("content").notNull(),
  excerpt: text("excerpt"),
  category: text("category").notNull(),
  imageUrl: text("image_url"),
  published: boolean("published").default(false),
  likes: integer("likes").default(0),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

export const blogComments = pgTable("blog_comments", {
  id: serial("id").primaryKey(),
  blogId: integer("blog_id").references(() => blogs.id).notNull(),
  userId: integer("user_id").references(() => users.id).notNull(),
  content: text("content").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const blogLikes = pgTable("blog_likes", {
  id: serial("id").primaryKey(),
  blogId: integer("blog_id").references(() => blogs.id).notNull(),
  userId: integer("user_id").references(() => users.id).notNull(),
});

// Insert schemas
export const insertUserSchema = createInsertSchema(users).omit({
  id: true,
  createdAt: true,
});

export const insertExerciseSchema = createInsertSchema(exercises).omit({
  id: true,
});

export const insertWorkoutPlanSchema = createInsertSchema(workoutPlans).omit({
  id: true,
  createdAt: true,
});

export const insertWorkoutSessionSchema = createInsertSchema(workoutSessions).omit({
  id: true,
});

export const insertFoodEntrySchema = createInsertSchema(foodEntries).omit({
  id: true,
});

export const insertBlogSchema = createInsertSchema(blogs).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
  likes: true,
});

export const insertBlogCommentSchema = createInsertSchema(blogComments).omit({
  id: true,
  createdAt: true,
});

// Types
export type User = typeof users.$inferSelect;
export type InsertUser = z.infer<typeof insertUserSchema>;
export type Exercise = typeof exercises.$inferSelect;
export type InsertExercise = z.infer<typeof insertExerciseSchema>;
export type WorkoutPlan = typeof workoutPlans.$inferSelect;
export type InsertWorkoutPlan = z.infer<typeof insertWorkoutPlanSchema>;
export type WorkoutSession = typeof workoutSessions.$inferSelect;
export type InsertWorkoutSession = z.infer<typeof insertWorkoutSessionSchema>;
export type FoodEntry = typeof foodEntries.$inferSelect;
export type InsertFoodEntry = z.infer<typeof insertFoodEntrySchema>;
export type Blog = typeof blogs.$inferSelect;
export type InsertBlog = z.infer<typeof insertBlogSchema>;
export type BlogComment = typeof blogComments.$inferSelect;
export type InsertBlogComment = z.infer<typeof insertBlogCommentSchema>;
